#include <iostream> 
#include <queue> 
#include <stack> 
#include <vector> 
 
using namespace std; 
 
void bfs(int start, vector<vector<int>> &graph, vector<bool> &visited) { queue<int> q; visited[start] = true; q.push(start); 
 
while (!q.empty()) { int curr = q.front(); q.pop(); 
 
cout << curr << " "; 
 
for (int i = 0; i < graph[curr].size(); i++) { int next = graph[curr][i]; if (!visited[next]) { visited[next] = true; q.push(next); 
} 
} 
} 
} 
 
 
int main() { 
int n = 6; 
vector<vector<int>> graph(n); 
graph[0] = {1, 2}; graph[1] = {0, 3, 4}; graph[2] = {0, 4}; graph[3] = {1, 4, 5}; graph[4] = {1, 2, 3, 5}; graph[5] = {3, 4}; vector<bool> visited(n, false); 
cout << "BFS: "; bfs(0, graph, visited); 
 
visited.assign(n, false); 
 
 
return 0; 
} 
 
